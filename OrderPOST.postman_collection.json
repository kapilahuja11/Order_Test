{
	"info": {
		"_postman_id": "678b84a1-6239-449e-bf60-1e61c06a2032",
		"name": "OrderPOST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TC01_OrdersAPI_Health_Check",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Validate service is Healthy\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"Healthy\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/health/live",
					"host": [
						"{{URL}}"
					],
					"path": [
						"health",
						"live"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC02_OrdersAPI_DB_Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Validate service is Healthy\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"Healthy\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/health/live",
					"host": [
						"{{URL}}"
					],
					"path": [
						"health",
						"live"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC03_OrdersAPI_Post_Order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"CilentOrderID\", String(Date.now()));\r",
							"pm.collectionVariables.set(\"xPBTransactionId\",String(Date.now()));\r",
							"pm.collectionVariables.set(\"xPBCorrelationId\",String(Date.now()));\r",
							"pm.collectionVariables.set(\"xPBDeveloperId\",123);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"    pm.globals.set(\"originalRequest\", pm.request.body.raw);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.globals.set(\"OrderID\", jsonData.orderId);\r",
							"});\r",
							"pm.test(\"Validate OrderID in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    var clientID = requestBody.clientId;\r",
							"    var country = requestBody.toAddress.countryCode;\r",
							"    pm.expect(jsonData.orderId).to.contains(clientID);\r",
							"    pm.expect(jsonData.orderId).to.contains(\"OR\");\r",
							"    pm.expect(jsonData.orderId).to.contains(country);\r",
							"});\r",
							"pm.test(\"Validate Brand in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    var brand = requestBody.brand;  \r",
							"    pm.expect(jsonData.brand).to.eql(brand);  \r",
							"});\r",
							"pm.test(\"Validate Order References in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.references.name).to.eql(requestBody.references.name);  \r",
							"    pm.expect(jsonData.references.value).to.eql(requestBody.references.value);  \r",
							"});\r",
							"pm.test(\"Validate Order SalesChannel in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.salesChannel.id).to.eql(parseInt(requestBody.salesChannel.id));  \r",
							"    pm.expect(jsonData.salesChannel.name).to.eql(requestBody.salesChannel.name);  \r",
							"});\r",
							"pm.test(\"Validate Order shippingDetails in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.shippingDetails.carrier).to.eql(requestBody.shippingDetails.carrier);  \r",
							"    pm.expect(jsonData.shippingDetails.serviceId).to.eql(requestBody.shippingDetails.serviceId);  \r",
							"});\r",
							"pm.test(\"Validate Orderlines in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderLines.length).to.eql(requestBody.orderLines.length);\r",
							"    for(var i=0;i<requestBody.orderLines.length;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderLines[i].sku).to.eql(requestBody.orderLines[i].sku);  \r",
							"    pm.expect(jsonData.orderLines[i].unitPrice).to.eql(requestBody.orderLines[i].unitPrice);  \r",
							"    pm.expect(jsonData.orderLines[i].orderedQuantity).to.eql(requestBody.orderLines[i].orderedQuantity);  \r",
							"    pm.expect(jsonData.orderLines[i].lineTotal).to.eql(requestBody.orderLines[i].lineTotal);\r",
							"    pm.expect(jsonData.orderLines[i].inventoryType).to.eql(requestBody.orderLines[i].inventoryType);\r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate Dates in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.promisedShipOnDate).to.eql(\"2022-06-07T19:20:00-06:00\");\r",
							"    pm.expect(jsonData.fulfillmentReleaseDate).to.eql(\"2022-06-08T19:20:00-06:00\");\r",
							"    pm.expect(jsonData.promisedDeliveryDate).to.eql(\"2022-06-09T19:20:00-06:00\");\r",
							"});\r",
							"pm.test(\"Validate Order Charges in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.orderCurrency).to.eql(requestBody.orderCharges.orderCurrency);\r",
							"    pm.expect(jsonData.orderCharges.shippingAmount).to.eql(parseInt((requestBody.orderCharges.shippingAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalItemAmount).to.eql(parseInt((requestBody.orderCharges.totalItemAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalDutyAmount).to.eql(parseInt((requestBody.orderCharges.totalDutyAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalTaxAmount).to.eql(parseInt((requestBody.orderCharges.totalTaxAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalDiscountAmount).to.eql(parseInt((requestBody.orderCharges.totalDiscountAmount)));\r",
							"    pm.expect(jsonData.orderCharges.cashOnDeliveryAmount).to.eql(parseInt((requestBody.orderCharges.cashOnDeliveryAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalOrderAmount).to.eql(parseInt((requestBody.orderCharges.totalOrderAmount)));\r",
							"});\r",
							"pm.test(\"Validate tax detail in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.taxDetails.length).to.eql(requestBody.orderCharges.taxDetails.length);\r",
							"    for(var i=0;i<jsonData.orderCharges.taxDetails;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].name).to.eql(orderCharges.taxDetails[i].name);  \r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].fee).to.eql(orderCharges.taxDetails[i].fee); \r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].currency).to.eql(orderCharges.taxDetails[i].currency);\r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].percentage).to.eql(orderCharges.taxDetails[i].percentage); \r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate discountDetails in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.discountDetails.length).to.eql(requestBody.orderCharges.discountDetails.length);\r",
							"    for(var i=0;i<jsonData.orderCharges.discountDetails;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].name).to.eql(orderCharges.discountDetails[i].name);  \r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].fee).to.eql(orderCharges.discountDetails[i].fee); \r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].currency).to.eql(orderCharges.discountDetails[i].currency);\r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].percentage).to.eql(orderCharges.discountDetails[i].percentage); \r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate otherChargeDetails in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails.length).to.eql(requestBody.orderCharges.otherChargeDetails.length);\r",
							"    for(var i=0;i<jsonData.orderCharges.otherChargeDetails;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].name).to.eql(orderCharges.otherChargeDetails[i].name);  \r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].fee).to.eql(orderCharges.otherChargeDetails[i].fee); \r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].currency).to.eql(orderCharges.otherChargeDetails[i].currency);\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].percentage).to.eql(orderCharges.otherChargeDetails[i].percentage); \r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate To Address in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.toAddress.name).to.eql(requestBody.toAddress.name);\r",
							"    pm.expect(jsonData.toAddress.company).to.eql(requestBody.toAddress.company);\r",
							"    pm.expect(jsonData.toAddress.phone).to.eql(requestBody.toAddress.phone);\r",
							"    pm.expect(jsonData.toAddress.email).to.eql(requestBody.toAddress.email);\r",
							"    pm.expect(jsonData.toAddress.cityTown).to.eql(requestBody.toAddress.cityTown);\r",
							"    pm.expect(jsonData.toAddress.stateProvince).to.eql(requestBody.toAddress.stateProvince);\r",
							"    pm.expect(parseInt(jsonData.toAddress.postalCode)).to.eql(parseInt(requestBody.toAddress.postalCode));\r",
							"    pm.expect(jsonData.toAddress.countryCode).to.eql(requestBody.toAddress.countryCode);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientId\": \"1234\",\r\n    \"clientOrderId\": {{CilentOrderID}},\r\n    \"customerOrderId\": \"111-212-1687792\",\r\n    \"brand\":\"MyBrand\",\r\n    \"references\": [\r\n        {\r\n            \"name\": \"OrderRef\",\r\n            \"value\": \"OrderRefValue\"\r\n        }\r\n    ],\r\n    \"salesChannel\": {\r\n        \"id\": \"12\",\r\n        \"name\": \"MARKETPLACE PLACE\"\r\n    },\r\n    \"shippingDetails\": {\r\n        \"carrier\": \"PITNEY BOWES\",\r\n        \"serviceId\": \"PARCEL\",\r\n        \"serviceName\": \"PARCEL SELECT\",\r\n        \"trackingNumber\":\"9560533222\"\r\n    },\r\n    \"orderType\": \"eCom\",\r\n    \"createDate\": \"2022-06-07T01:20:00.0000000Z\",\r\n    \"fromNode\": \"IND\",\r\n    \"promisedShipOnDate\": \"2022-06-08T01:20:00.0000000Z\",\r\n    \"fulfillmentReleaseDate\": \"2022-06-09T01:20:00.0000000Z\",\r\n    \"promisedDeliveryDate\": \"2022-06-10T01:20:00.0000000Z\",\r\n    \"orderHandling\": \"E\",\r\n    \"orderLines\": [\r\n        {\r\n            \"lineId\": 1,\r\n            \"sku\": \"1622661547472\",\r\n            \"unitPrice\": 10,\r\n            \"orderedQuantity\": 5,\r\n            \"lineTotal\": 50,\r\n            \"originCountryCode\":\"US\",\r\n            \"originStateProvince\":\"CT\",\r\n            \"hSTariffCode\":\"HSCode\",\r\n            \"hSTariffCodeCountry\":\"IND\",\r\n            \"inventoryType\":\"NEW\",\r\n            \"additionalDetails\": {\r\n                \"alternateSKU\": \"PRODUCT-SKU-121\",\r\n                \"lotNumber\": \"Lot1\",\r\n                \"releaseAfterDate\": \"2023-06-07T01:20:00.000Z\",\r\n                \"promisedShipDate\": \"2023-06-08T01:20:00.000Z\",\r\n                \"promisedDeliveryDate\": \"2023-06-09T01:20:00.000Z\",\r\n                \"additionalReferences\": [\r\n                    {\r\n                        \"name\": \"OrdellineRef1\",\r\n                        \"value\": \"OrdellineValue1\"\r\n                    }\r\n                ],\r\n                \"valueAddedServices\": [\r\n                    {\r\n                        \"type\": \"V1\",\r\n                        \"details\": \"VASDET1\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"lineId\": 2,\r\n            \"sku\": \"1622661569762\",\r\n            \"unitPrice\": 10,\r\n            \"orderedQuantity\": 10,\r\n            \"lineTotal\": 100,\r\n            \"originCountryCode\":\"US\",\r\n            \"originStateProvince\":\"CT\",\r\n            \"hSTariffCode\":\"HSCode\",\r\n            \"hSTariffCodeCountry\":\"IND\",\r\n            \"inventoryType\":\"NEW\",\r\n            \"additionalDetails\": {\r\n                \"alternateSKU\": \"PRODUCT-SKU-121\",\r\n                \"lotNumber\": \"Lot1\",\r\n                \"releaseAfterDate\": \"2024-06-07T01:20:00.000Z\",\r\n                \"promisedShipDate\": \"2024-06-08T01:20:00.000Z\",\r\n                \"promisedDeliveryDate\": \"2024-06-09T01:20:00.000Z\",\r\n                \"additionalReferences\": [\r\n                    {\r\n                        \"name\": \"OrdellineRef2\",\r\n                        \"value\": \"OrdellineValue2\"\r\n                    }\r\n                ],\r\n                    \"valueAddedServices\": [\r\n                    {\r\n                        \"type\": \"V2\",\r\n                        \"details\": \"VASDET2\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"orderCharges\": {\r\n        \"orderCurrency\": \"USD\",\r\n        \"shippingAmount\": 10,\r\n        \"totalItemAmount\": 150,\r\n        \"totalDutyAmount\": 10,\r\n        \"dutyDetails\": [\r\n            {\r\n                \"name\": \"COUPON\",\r\n                \"fee\": 5,\r\n                \"currency\": \"USD\",\r\n                \"percentage\": 1\r\n            }\r\n        ],\r\n        \"totalTaxAmount\": 5,\r\n        \"taxDetails\": [\r\n            {\r\n                \"name\": \"SALES TAX\",\r\n                \"fee\": 5,\r\n                \"currency\": \"USD\",\r\n                \"percentage\": 1\r\n            }\r\n        ],\r\n        \"totalDiscountAmount\": 5,\r\n        \"discountDetails\": [\r\n            {\r\n                \"name\": \"COUPON\",\r\n                \"fee\": 5,\r\n                \"currency\": \"USD\",\r\n                \"percentage\": 1\r\n            }\r\n        ],\r\n        \"cashOnDeliveryAmount\": 0,\r\n        \"otherChargeDetails\": [\r\n            {\r\n                \"name\": \"SUPPLIER_FEE\",\r\n                \"fee\": 0\r\n            }\r\n        ],\r\n        \"totalOrderAmount\": 160\r\n    },\r\n    \"toAddress\": {\r\n        \"name\": \"sent to John Smith\",\r\n        \"company\": \"ABC\",\r\n        \"phone\": \"111-111-1111\",\r\n        \"email\": \"john.doe@example.com\",\r\n        \"addressLines\": [\r\n            \"2352 Bent Creek Rd\",\r\n            \"Street NW10\",\r\n            \"address line 3\"\r\n        ],\r\n        \"cityTown\": \"Auburn\",\r\n        \"stateProvince\": \"AL\",\r\n        \"postalCode\": 36830,\r\n        \"countryCode\": \"US\"\r\n    },\r\n    \"billingAddress\": {\r\n        \"name\": \"bill to John Smith\",\r\n        \"company\": \"ABC\",\r\n        \"phone\": \"111-111-1111\",\r\n        \"email\": \"john.doe@example.com\",\r\n        \"addressLines\": [\r\n            \"2352 Bent Creek Rd\",\r\n            \"Street NW10\",\r\n            \"Street NW10\"\r\n        ],\r\n        \"cityTown\": \"Auburn\",\r\n        \"stateProvince\": \"AL\",\r\n        \"postalCode\": 36830,\r\n        \"countryCode\": \"US\"\r\n    },\r\n    \"isGift\": true,\r\n    \"giftMessageText\": \"HAPPY THANKSGIVING\",\r\n    \"paymentDetails\": [\r\n        {\r\n            \"paymentMethod\": \"CREDIT CARD\",\r\n            \"accountNumber\": 9999,\r\n            \"status\": \"prepaid\"\r\n        }\r\n    ],\r\n    \"customsInfo\": [{\r\n        \"customsDeclaredValue\": 1,\r\n        \"importerCustomsReference\": 1,\r\n        \"importerCustomsReferenceType\": \"TAXID\"\r\n    }]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC04_OrdersAPI_Post_Order_xPBTransactionId_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when xPBTransactionId is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[1].parameters[0]).to.eql(\"xPBTransactionId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC05_OrdersAPI_Post_DuplicateOrder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Duplicate Order.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"009\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"This order is already exist\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC06_OrdersAPI_Post_Order_Client_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"clientId\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ClientID is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ClientId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC07_OrdersAPI_Post_Order_ClientOrderID_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"clientOrderId\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ClientOrder is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ClientOrderId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC08_OrdersAPI_Post_Order_ShipmentDetail_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"shippingDetails\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Shipment Detail is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ShippingDetails\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC09_OrdersAPI_Post_Order_ShipmentDetail_carrier_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"shippingDetails\"][\"carrier\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Shipment Detail Carrier is blank\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ShippingDetails.Carrier\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC10_OrdersAPI_Post_Order_ShipmentDetail_serviceId_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"shippingDetails\"][\"serviceId\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Shipment Detail serviceId is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ShippingDetails.ServiceId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC11_OrdersAPI_Post_Order_OrderType_Defaultto_eCom",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderType\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Validate Default value for Order Type in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderType).to.contains(\"eCom\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC12_OrdersAPI_Post_Order_OrderType_othenthan_Expected",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"tempRequest[\"orderType\"] = \"invalid\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when OrderType has othenthan Expected value.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"045\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"invalid value provided\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderType\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC13_OrdersAPI_Post_Order_CreateDate_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"delete tempRequest[\"createDate\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when CreateDate is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"CreateDate\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC14_OrdersAPI_Post_Order_orderHandling_DefaultValue_X",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"delete tempRequest[\"orderHandling\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Validate Default value for orderHandling in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderHandling).to.contains(\"X\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC15_OrdersAPI_Post_Order_orderHandling_OthenThan_Expected",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"tempRequest[\"orderHandling\"] = \"Invalid\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when orderHandling is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"045\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"invalid value provided\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderHandling\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC16_OrdersAPI_Post_Order_orderLines_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderLines\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when OrderLines is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"OrderLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC17_OrdersAPI_Post_Order_orderLines_SKU_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderLines\"][0][\"sku\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error message when SKU blank\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"OrderLines[0].Sku\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC18_OrdersAPI_Post_Order_Invalid_CurrancyCode",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"orderLines\"][0][\"originCountryCode\"]= \"AAA\";\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error message Invalid Currancy Code Provided\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"033\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Invalid ISO Country Code\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"OrderLine[0].OriginCountryCode\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC19_OrdersAPI_Post_Order_OrderQuentity_invalid",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"orderLines\"][0][\"orderedQuantity\"]= 0;\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error message Invalid Order Quentity Provided.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"016\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Ordered quantity should be greater then 0\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderline[0].OrderedQuantity\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC20_OrdersAPI_Post_Order_InventoryType_defaultValue_New",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderLines\"][0][\"inventoryType\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Validate Default value for Inventory Type in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderLines[0].inventoryType).to.contains(\"NEW\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC21_OrdersAPI_Post_Order_Unexpected_Value_For_InventoryType",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"orderLines\"][0][\"inventoryType\"]=\"invalid\";\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Inventory Type is invalid.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"045\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"invalid value provided\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderLines[0].inventoryType\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC22_OrdersAPI_Post_Order_Without_OrderLine_ValueAddedServices",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderLines\"][0][\"additionalDetails\"][\"valueAddedServices\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Orderlines->AdditionalDetails->valueAddedServices are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderLines[0].additionalDetails.valueAddedServices.length).to.eql(0);\r",
							"   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC23_OrdersAPI_Post_Order_Without_OrderLine_additionalReferences",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderLines\"][0][\"additionalDetails\"][\"additionalReferences\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Orderlines->AdditionalDetails->additionalReferences are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderLines[0].additionalDetails.additionalReferences.length).to.eql(0);   \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC24_OrdersAPI_Post_Order_Without_OrderLine_additionalDetails",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderLines\"][0][\"additionalDetails\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Orderlines->AdditionalDetails are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderLines[0].additionalDetails.additionalReferences.length).to.eql(0);   \r",
							"    pm.expect(jsonData.orderLines[0].additionalDetails.valueAddedServices.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC25_OrdersAPI_Post_Order_Without_orderCharges_dutyDetails",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"dutyDetails\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Order Carges-> Duty Details are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderCharges.dutyDetails.length).to.eql(0);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC26_OrdersAPI_Post_Order_Without_orderCharges_taxDetails",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"taxDetails\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Order Carges-> Tax Details are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderCharges.taxDetails.length).to.eql(0);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC27_OrdersAPI_Post_Order_Without_orderCharges_discountDetails",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"discountDetails\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Order Carges-> discountDetails are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderCharges.discountDetails.length).to.eql(0);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC27_OrdersAPI_Post_Order_Without_orderCharges_OtherCharges",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"otherChargeDetails\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Order Carges-> otherChargeDetails are blank in response.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails.length).to.eql(0);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC28_OrdersAPI_Post_Order_Without_orderCharges",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC29_OrdersAPI_Post_Order_orderCharges_orderCurrency_default_USD",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"] [\"orderCurrency\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate Order default Order Currancy when not provided..\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderCharges.orderCurrency).to.eql(\"USD\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC30_OrdersAPI_Post_Order_totalItemAmount_0_errorMessage",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"orderCharges\"] [\"totalItemAmount\"]=0;\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error message when Order Charge->totalItemAmount is 0 Provided.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"031\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"TotalItemAmount should be greater than 0 \");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"OrderCharges.TotalItemAmount\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC31_OrdersAPI_Post_Order_totalOrderAmount_0_errorMessage",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"orderCharges\"] [\"totalOrderAmount\"]=0;\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error message when Order Charge->totalOrderAmount is 0 Provided.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"061\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"TotalOrderAmount should be greater than 0 \");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"OrderCharges.TotalOrderAmount\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC32_OrdersAPI_Post_Order_orderCharges_dutyDetails_DefaultValue_Currency",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"dutyDetails\"][0][\"currency\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate default value for Order Charges Duty Details when not provided..\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.dutyDetails[0].currency).to.eql(requestBody.orderCharges.orderCurrency);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC33_OrdersAPI_Post_Order_orderCharges_taxDetails_DefaultValue_Currency",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"taxDetails\"][0][\"currency\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate default value for Order Tax Details when not provided..\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  requestBody = JSON.parse(pm.request.body.raw);\r",
							"  pm.expect(jsonData.orderCharges.taxDetails[0].currency).to.eql(requestBody.orderCharges.orderCurrency); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC34_OrdersAPI_Post_Order_orderCharges_discountDetails_DefaultValue_Currency",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"discountDetails\"][0][\"currency\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate default value for Order discountDetails when not provided..\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.discountDetails[0].currency).to.eql(requestBody.orderCharges.orderCurrency);  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC35_OrdersAPI_Post_Order_orderCharges_otherChargeDetails_DefaultValue_Currency",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"orderCharges\"][\"otherChargeDetails\"][0][\"currency\"];\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");  \r",
							"});\r",
							"pm.test(\"Validate default value for Order otherChargeDetails when not provided..\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[0].currency).to.eql(requestBody.orderCharges.orderCurrency);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC36_OrdersAPI_Post_Order_Toaddress_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC37_OrdersAPI_Post_Order_Toaddress_Name_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"name\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress Name is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress.Name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC38_OrdersAPI_Post_Order_Toaddress_addressLines_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"addressLines\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress AddressLine is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress.AddressLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC76_OrdersAPI_Update_Order_Toaddress_addressLines_noaddessline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"toAddress\"][\"addressLines\"]=\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress no AddressLine provided.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress.AddressLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC40_OrdersAPI_Post_Order_Toaddress_more than3_addressLines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"toAddress\"][\"addressLines\"]=\"\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"D\\\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress AddressLine has more than 3 lines\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"045\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"invalid value provided\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"toAddress.addressLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC41_OrdersAPI_Post_Order_Toaddress_cityTown_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"cityTown\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress cityTown is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.toLowerCase()).to.eql((\"Required field is missing.\").toLowerCase());\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.eql((\"ToAddress.CityTown\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC42_OrdersAPI_Post_Order_Toaddress_stateProvince_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"stateProvince\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress stateProvince is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"toAddress.stateprovince\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC43_OrdersAPI_Post_Order_Toaddress_postalCode_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"postalCode\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress postalCode is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"toAddress.postalCode\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC44_OrdersAPI_Post_Order_Toaddress_countryCode_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"countryCode\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress countryCode is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"toAddress.countryCode\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC45_OrdersAPI_Post_Order_Billingaddress_Name_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"billingAddress\"][\"name\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address name is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.Name\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC46_OrdersAPI_Post_Order_Billingaddress_addressLines_Blank",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address AddressLine is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.addresslines\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"billingAddress\"][\"addressLines\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC47_OrdersAPI_Post_Order_Billingaddress_AddressLine_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"billingAddress\"][\"addressLines\"]=\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address AddressLine is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.addresslines\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC48_OrdersAPI_Post_Order_Billingaddress_more than3_addressLines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"billingAddress\"][\"addressLines\"]=\"\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"D\\\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address AddressLine has more than 3 lines\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"045\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.toLowerCase()).to.eql(\"invalid value provided\".toLowerCase());\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.eql((\"BillingAddress.addressLines\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC49_OrdersAPI_Post_Order_Billingaddress_cityTown_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"billingAddress\"][\"cityTown\"]=\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address cityTown is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.cityTown\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC50_OrdersAPI_Post_Order_Billingaddress_stateProvince_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"billingAddress\"][\"stateProvince\"]=\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address stateProvince is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.stateProvince\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC51_OrdersAPI_Post_Order_Billingaddress_postalCode_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"billingAddress\"][\"postalCode\"]=\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address postalCode is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.postalCode\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC52_OrdersAPI_Post_Order_Billingaddress_countryCode_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"billingAddress\"][\"countryCode\"] ;\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Billing Address countryCode is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.toLowerCase()).to.eql(\"Required field is missing.\".toLowerCase());\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"BillingAddress.countryCode\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC53_OrdersAPI_Post_Order_IsGift_defaultValue",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"delete tempRequest[\"isGift\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Validate Default value for isGift in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.isGift).to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC54_OrdersAPI_Post_Order_PaymentDetail_accountnumber_morethan4digit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"tempRequest[\"paymentDetails\"][0][\"accountNumber\"]=123455 ;\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when paymentdetail account number more than 4 digit.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"017\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.toLowerCase()).to.eql(\"PaymentDetails account number length should be 4\".toLowerCase());\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"AccountNumber\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC55_OrdersAPI_Post_Order_PaymentDetail_accountnumber_lessthan4digit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"tempRequest[\"paymentDetails\"][0][\"accountNumber\"]=112 ;\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when paymentdetail account number less than 4 digit.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"017\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.toLowerCase()).to.eql(\"PaymentDetails account number length should be 4\".toLowerCase());\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"AccountNumber\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC56_OrdersAPI_Post_Order_PaymentDetail_status_default_value",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"delete tempRequest[\"paymentDetails\"][0][\"status\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Validate Default value for PaymentDetai-> Status in Post Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.paymentDetails[0].status).to.contains(\"PrePaid\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC57_OrdersAPI_Post_Order_FromNode_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"delete tempRequest[\"fromNode\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC58_OrdersAPI_Post_Order_invalid_xPBDeveloperId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when xPBDeveloperId is invalid.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"012\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Invalid clientId\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ClientId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "invalid",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC59_OrdersAPI_Post_Order_invalid_ClientID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientOrderId\"] = String(Date.now());\r",
							"tempRequest[\"clientId\"] = \"Invalid\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ClientID is invalid.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"012\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Invalid clientId\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ClientId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC60_OrderAPI_ValidateErrorMessage_Invalid_Brand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when invalid Order ID provided in request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"007\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"brand not found\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"brandName\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/services/v1/OR1234A0001661075820908544US?brand=Mybrand",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"OR1234A0001661075820908544US"
					],
					"query": [
						{
							"key": "brand",
							"value": "Mybrand"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC61_OrderAPI_ValidateResponse_ValidPBOrderID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"PBOrderID\", \"ORCLIENT16\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Validate PBOrderID in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderId).to.eql(pm.collectionVariables.get(\"PBOrderID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://ful-orders-api-int.fdr.pitneycloud.com/services/v1/OR1234A0001661075820908544US?brand=Mybrand",
					"protocol": "https",
					"host": [
						"ful-orders-api-int",
						"fdr",
						"pitneycloud",
						"com"
					],
					"path": [
						"services",
						"v1",
						"OR1234A0001661075820908544US"
					],
					"query": [
						{
							"key": "brand",
							"value": "Mybrand"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC62_OrderAPI_ValidateResponse_ValidClientOrderID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Validate PBOrderID in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.clientOrderId).to.eql(pm.collectionVariables.get(\"ClientOrderID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"ClientOrderID\", \"ORCLIENT25\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/orders/{{ClientOrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"orders",
						"{{ClientOrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC63_OrderAPI_ValidateResponse_ValidClientOrderID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/orders/{{ClientOrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"orders",
						"{{ClientOrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC64_OrderAPI_ValidateErrorMessage_Invalid_OrderID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when invalid Order ID provided in request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"003\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"order not found for orderId\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"PBOrderID\", \"ORCLIENT16ccc\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{URL}}/api/orders/{{PBOrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"orders",
						"{{PBOrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC65_OrderAPI_ValidateErrorMessage_Invalid_DeveloperID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when invalid Order ID provided in request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"010\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"X-PB-DeveloperId not found\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"X-PB-DeveloperId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: 'xPBDeveloperId',\r",
							"  value: 'invalid'\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "xPBDeveloperId",
						"value": "invalid",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{URL}}/api/orders/{{PBOrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"orders",
						"{{PBOrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC66_ORDERAPI_Update_Order_with_Invalid_OrderID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Brand is invalid.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"031\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.contain(\"order not found for orderId\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderId\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/invalid",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"invalid"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC67_ORDERAPI_Update_Order_with_Invalid_ClientID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ClientID is invalid.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"012\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Invalid clientId\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ClientId\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"clientId\"] = \"invalid\"\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC68_ORDERAPI_Update_Order_ValidOrder_ValidClient_Invalid_Brand",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"brand\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Brand is invalid.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"031\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.contain(\"order not found for orderId\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"orderId\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC69_ORDERAPI_Update_Order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"    pm.globals.set(\"originalRequest\", pm.request.body.raw);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.globals.set(\"OrderID\", jsonData.orderId);\r",
							"});\r",
							"pm.test(\"Validate OrderID in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    var clientID = requestBody.clientId;\r",
							"    var country = requestBody.toAddress.countryCode;\r",
							"    pm.expect(jsonData.orderId).to.contains(clientID);\r",
							"    pm.expect(jsonData.orderId).to.contains(\"OR\");\r",
							"    pm.expect(jsonData.orderId).to.contains(country);\r",
							"});\r",
							"pm.test(\"Validate Brand in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    var brand = requestBody.brand;  \r",
							"    pm.expect(jsonData.brand).to.eql(brand);  \r",
							"});\r",
							"pm.test(\"Validate Order References in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.references.name).to.eql(requestBody.references.name);  \r",
							"    pm.expect(jsonData.references.value).to.eql(requestBody.references.value);  \r",
							"});\r",
							"pm.test(\"Validate Order SalesChannel in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.salesChannel.id).to.eql(parseInt(requestBody.salesChannel.id));  \r",
							"    pm.expect(jsonData.salesChannel.name).to.eql(requestBody.salesChannel.name);  \r",
							"});\r",
							"pm.test(\"Validate Order shippingDetails in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.shippingDetails.carrier).to.eql(requestBody.shippingDetails.carrier);  \r",
							"    pm.expect(jsonData.shippingDetails.serviceId).to.eql(requestBody.shippingDetails.serviceId);  \r",
							"});\r",
							"pm.test(\"Validate Orderlines in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderLines.length).to.eql(requestBody.orderLines.length);\r",
							"    for(var i=0;i<requestBody.orderLines.length;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderLines[i].sku).to.eql(requestBody.orderLines[i].sku);  \r",
							"    pm.expect(jsonData.orderLines[i].unitPrice).to.eql(requestBody.orderLines[i].unitPrice);  \r",
							"    pm.expect(jsonData.orderLines[i].orderedQuantity).to.eql(requestBody.orderLines[i].orderedQuantity);  \r",
							"    pm.expect(jsonData.orderLines[i].lineTotal).to.eql(requestBody.orderLines[i].lineTotal);\r",
							"    pm.expect(jsonData.orderLines[i].inventoryType).to.eql(requestBody.orderLines[i].inventoryType);\r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate Dates in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.promisedShipOnDate).to.eql(\"2023-06-07T18:00:00-06:00\");\r",
							"    pm.expect(jsonData.fulfillmentReleaseDate).to.eql(\"2023-06-07T18:00:00-06:00\");\r",
							"    pm.expect(jsonData.promisedDeliveryDate).to.eql(\"2023-06-07T18:00:00-06:00\");\r",
							"});\r",
							"pm.test(\"Validate Order Charges in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.orderCurrency).to.eql(requestBody.orderCharges.orderCurrency);\r",
							"    pm.expect(jsonData.orderCharges.shippingAmount).to.eql(parseInt((requestBody.orderCharges.shippingAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalItemAmount).to.eql(parseInt((requestBody.orderCharges.totalItemAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalDutyAmount).to.eql(parseInt((requestBody.orderCharges.totalDutyAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalTaxAmount).to.eql(parseInt((requestBody.orderCharges.totalTaxAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalDiscountAmount).to.eql(parseInt((requestBody.orderCharges.totalDiscountAmount)));\r",
							"    pm.expect(jsonData.orderCharges.cashOnDeliveryAmount).to.eql(parseInt((requestBody.orderCharges.cashOnDeliveryAmount)));\r",
							"    pm.expect(jsonData.orderCharges.totalOrderAmount).to.eql(parseInt((requestBody.orderCharges.totalOrderAmount)));\r",
							"});\r",
							"pm.test(\"Validate tax detail in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.taxDetails.length).to.eql(requestBody.orderCharges.taxDetails.length);\r",
							"    for(var i=0;i<jsonData.orderCharges.taxDetails;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].name).to.eql(orderCharges.taxDetails[i].name);  \r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].fee).to.eql(orderCharges.taxDetails[i].fee); \r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].currency).to.eql(orderCharges.taxDetails[i].currency);\r",
							"    pm.expect(jsonData.orderCharges.taxDetails[i].percentage).to.eql(orderCharges.taxDetails[i].percentage); \r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate discountDetails in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.discountDetails.length).to.eql(requestBody.orderCharges.discountDetails.length);\r",
							"    for(var i=0;i<jsonData.orderCharges.discountDetails;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].name).to.eql(orderCharges.discountDetails[i].name);  \r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].fee).to.eql(orderCharges.discountDetails[i].fee); \r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].currency).to.eql(orderCharges.discountDetails[i].currency);\r",
							"    pm.expect(jsonData.orderCharges.discountDetails[i].percentage).to.eql(orderCharges.discountDetails[i].percentage); \r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate otherChargeDetails in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails.length).to.eql(requestBody.orderCharges.otherChargeDetails.length);\r",
							"    for(var i=0;i<jsonData.orderCharges.otherChargeDetails;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].name).to.eql(orderCharges.otherChargeDetails[i].name);  \r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].fee).to.eql(orderCharges.otherChargeDetails[i].fee); \r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].currency).to.eql(orderCharges.otherChargeDetails[i].currency);\r",
							"    pm.expect(jsonData.orderCharges.otherChargeDetails[i].percentage).to.eql(orderCharges.otherChargeDetails[i].percentage); \r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate To Address in Update Order Response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.toAddress.name).to.eql(requestBody.toAddress.name);\r",
							"    pm.expect(jsonData.toAddress.company).to.eql(requestBody.toAddress.company);\r",
							"    pm.expect(jsonData.toAddress.phone).to.eql(requestBody.toAddress.phone);\r",
							"    pm.expect(jsonData.toAddress.email).to.eql(requestBody.toAddress.email);\r",
							"    pm.expect(jsonData.toAddress.cityTown).to.eql(requestBody.toAddress.cityTown);\r",
							"    pm.expect(jsonData.toAddress.stateProvince).to.eql(requestBody.toAddress.stateProvince);\r",
							"    pm.expect(parseInt(jsonData.toAddress.UpdatealCode)).to.eql(parseInt(requestBody.toAddress.UpdatealCode));\r",
							"    pm.expect(jsonData.toAddress.countryCode).to.eql(requestBody.toAddress.countryCode);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientId\": \"1234\",\r\n    \"clientOrderId\": {{CilentOrderID}},\r\n    \"customerOrderId\": \"111-212-1687792\",\r\n    \"brand\":\"MyBrand\",\r\n    \"references\": [\r\n        {\r\n            \"name\": \"OrderRefupdate\",\r\n            \"value\": \"OrderRefValuUpdate\"\r\n        }\r\n    ],\r\n    \"salesChannel\": {\r\n        \"id\": 124,\r\n        \"name\": \"MARKETPLACE PLACEUpdate\"\r\n    },\r\n    \"shippingDetails\": {\r\n        \"carrier\": \"PITNEY BOWES1\",\r\n        \"serviceId\": \"PARCEL1\",\r\n        \"serviceName\": \"PARCEL SELECT1\",\r\n        \"trackingNumber\":\"9560533221\"\r\n    },\r\n    \"orderType\": \"kit\",\r\n    \"createDate\": \"2021-06-07\",\r\n    \"fromNode\": \"IND\",\r\n    \"promisedShipOnDate\": \"2023-06-08\",\r\n    \"fulfillmentReleaseDate\": \"2023-06-08\",\r\n    \"promisedDeliveryDate\": \"2023-06-08\",\r\n    \"orderHandling\": \"E\",\r\n    \"orderLines\": [\r\n        {\r\n            \"lineId\": 1,\r\n            \"sku\": \"1622661547472\",\r\n            \"unitPrice\": 15,\r\n            \"orderedQuantity\": 5,\r\n            \"lineTotal\": 45,\r\n            \"originCountryCode\":\"US\",\r\n            \"originStateProvince\":\"CT\",\r\n            \"hSTariffCode\":\"HSCode\",\r\n            \"hSTariffCodeCountry\":\"IND\",\r\n            \"inventoryType\":\"NEW\",\r\n            \"additionalDetails\": {\r\n                \"alternateSKU\": \"PRODUCT-SKU-121\",\r\n                \"lotNumber\": \"Lot1\",\r\n                \"releaseAfterDate\": \"2023-06-07T01:20:00.000Z\",\r\n                \"promisedShipDate\": \"2023-06-08T01:20:00.000Z\",\r\n                \"promisedDeliveryDate\": \"2023-06-09T01:20:00.000Z\",\r\n                \"additionalReferences\": [\r\n                    {\r\n                        \"name\": \"UpdateRef1\",\r\n                        \"value\": \"updatevalue\"\r\n                    }\r\n                ],\r\n                \"valueAddedServices\": [\r\n                    {\r\n                        \"type\": \"V1\",\r\n                        \"details\": \"V1\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"lineId\": 2,\r\n            \"sku\": \"1622661569762\",\r\n            \"unitPrice\": 100,\r\n            \"orderedQuantity\": 10,\r\n            \"lineTotal\": 1000,\r\n            \"originCountryCode\":\"US\",\r\n            \"originStateProvince\":\"CT\",\r\n            \"hSTariffCode\":\"HSCode\",\r\n            \"hSTariffCodeCountry\":\"IND\",\r\n            \"inventoryType\":\"NEW\",\r\n            \"additionalDetails\": {\r\n                \"alternateSKU\": \"PRODUCT-SKU-121\",\r\n                \"lotNumber\": \"Lot1\",\r\n                \"releaseAfterDate\": \"2024-06-07T01:20:00.000Z\",\r\n                \"promisedShipDate\": \"2024-06-08T01:20:00.000Z\",\r\n                \"promisedDeliveryDate\": \"2024-06-09T01:20:00.000Z\",\r\n                \"additionalReferences\": [\r\n                    {\r\n                        \"name\": \"Ordellval2\",\r\n                        \"value\": \"OrdellineVal2\"\r\n                    }\r\n                ],\r\n                    \"valueAddedServices\": [\r\n                    {\r\n                        \"type\": \"V2\",\r\n                        \"details\": \"VASDET2\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"orderCharges\": {\r\n        \"orderCurrency\": \"USD\",\r\n        \"shippingAmount\": 10,\r\n        \"totalItemAmount\": 150,\r\n        \"totalDutyAmount\": 10,\r\n        \"dutyDetails\": [\r\n            {\r\n                \"name\": \"COUPON\",\r\n                \"fee\": 5,\r\n                \"currency\": \"USD\",\r\n                \"percentage\": 1\r\n            }\r\n        ],\r\n        \"totalTaxAmount\": 5,\r\n        \"taxDetails\": [\r\n            {\r\n                \"name\": \"SALES TAX\",\r\n                \"fee\": 5,\r\n                \"currency\": \"USD\",\r\n                \"percentage\": 1\r\n            }\r\n        ],\r\n        \"totalDiscountAmount\": 5,\r\n        \"discountDetails\": [\r\n            {\r\n                \"name\": \"COUPON\",\r\n                \"fee\": 5,\r\n                \"currency\": \"USD\",\r\n                \"percentage\": 1\r\n            }\r\n        ],\r\n        \"cashOnDeliveryAmount\": 0,\r\n        \"otherChargeDetails\": [\r\n            {\r\n                \"name\": \"SUPPLIER_FEE\",\r\n                \"fee\": 0\r\n            }\r\n        ],\r\n        \"totalOrderAmount\": 160\r\n    },\r\n    \"toAddress\": {\r\n        \"name\": \"John Smith\",\r\n        \"company\": \"ABC\",\r\n        \"phone\": \"111-111-1111\",\r\n        \"email\": \"john.doe@example.com\",\r\n        \"addressLines\": [\r\n            \"2352 Bent Creek Rd\",\r\n            \"Street NW10\",\r\n            \"address line 3\"\r\n        ],\r\n        \"cityTown\": \"Auburn\",\r\n        \"stateProvince\": \"AL\",\r\n        \"postalCode\": 36830,\r\n        \"countryCode\": \"US\"\r\n    },\r\n    \"billingAddress\": {\r\n        \"name\": \"John Smith\",\r\n        \"company\": \"ABC\",\r\n        \"phone\": \"111-111-1111\",\r\n        \"email\": \"john.doe@example.com\",\r\n        \"addressLines\": [\r\n            \"2352 Bent Creek Rd\",\r\n            \"Street NW10\",\r\n            \"Street NW10\"\r\n        ],\r\n        \"cityTown\": \"Auburn\",\r\n        \"stateProvince\": \"AL\",\r\n        \"postalCode\": 36830,\r\n        \"countryCode\": \"US\"\r\n    },\r\n    \"isGift\": true,\r\n    \"giftMessageText\": \"HAPPY THANKSGIVING Update\",\r\n    \"paymentDetails\": [\r\n        {\r\n            \"paymentMethod\": \"CREDIT CARD\",\r\n            \"accountNumber\": 1111,\r\n            \"status\": \"prepaid\"\r\n        }\r\n    ],\r\n    \"customsInfo\": [{\r\n        \"customsDeclaredValue\": 1,\r\n        \"importerCustomsReference\": 1,\r\n        \"importerCustomsReferenceType\": \"TAXID\"\r\n    }]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC70_ORDERAPI_Update_OrderLine_with_additional_ordelineItem",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"let myjsonobj = {\r",
							"            \"lineId\": 3,\r",
							"            \"sku\": \"1622661570951\",\r",
							"            \"unitPrice\": 100,\r",
							"            \"orderedQuantity\": 10,\r",
							"            \"lineTotal\": 1000,\r",
							"            \"originCountryCode\":\"US\",\r",
							"            \"originStateProvince\":\"CT\",\r",
							"            \"hSTariffCode\":\"HSCode\",\r",
							"            \"hSTariffCodeCountry\":\"IND\",\r",
							"            \"inventoryType\":\"NEW\",}\r",
							"tempRequest[\"orderLines\"][2]=myjsonobj\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\"); \r",
							"});\r",
							"pm.test(\"Validate Orderlines in Update Order Response when added new line Item\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonData.orderLines.length).to.eql(requestBody.orderLines.length);\r",
							"    for(var i=0;i<requestBody.orderLines.length;i++)\r",
							"    {\r",
							"    pm.expect(jsonData.orderLines[i].sku).to.eql(requestBody.orderLines[i].sku);  \r",
							"    pm.expect(jsonData.orderLines[i].unitPrice).to.eql(requestBody.orderLines[i].unitPrice);  \r",
							"    pm.expect(jsonData.orderLines[i].orderedQuantity).to.eql(requestBody.orderLines[i].orderedQuantity);  \r",
							"    pm.expect(jsonData.orderLines[i].lineTotal).to.eql(requestBody.orderLines[i].lineTotal);\r",
							"    pm.expect(jsonData.orderLines[i].inventoryType).to.eql(requestBody.orderLines[i].inventoryType);\r",
							"    }\r",
							"});\r",
							"pm.test(\"Verify PB Update timestamp\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.pbUpdateDate != null )\r",
							"   let moment = require ('moment');\r",
							"   pm.expect(jsonData.pbUpdateDate).to.include(moment().format('YYYY-MM-DD'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC71_ORDERAPI_Update_OrderLine_with_less_ordelineItem",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\"); \r",
							"});\r",
							"pm.test(\"Validate Orderlines when Order Line Items are less than Orignal\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    requestBody = JSON.parse(pm.request.body.raw); \r",
							"    console.log(jsonData.orderLines.length);\r",
							"    for(var i=0;i<jsonData.orderLines.length;i++)\r",
							"    {\r",
							"    if(i=2)\r",
							"    pm.expect(jsonData.orderLines[i].orderedQuantity).to.eql(0); \r",
							"    else\r",
							"    {\r",
							"    pm.expect(jsonData.orderLines[i].sku).to.eql(requestBody.orderLines[i].sku);  \r",
							"    pm.expect(jsonData.orderLines[i].unitPrice).to.eql(requestBody.orderLines[i].unitPrice);  \r",
							"    \r",
							"    pm.expect(jsonData.orderLines[i].orderedQuantity).to.eql(requestBody.orderLines[i].orderedQuantity);  \r",
							"    pm.expect(jsonData.orderLines[i].lineTotal).to.eql(requestBody.orderLines[i].lineTotal);\r",
							"    pm.expect(jsonData.orderLines[i].inventoryType).to.eql(requestBody.orderLines[i].inventoryType);\r",
							"    }}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC72_ORDERAPI_Update_Order_Status_InProgress",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is InProgress.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"062\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"Order could not be updated due to status\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"status\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661075820908544US",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661075820908544US"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC73_ORDERAPI_Update_Order_Status_BACKORDER",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Backorder.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"062\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"Order could not be updated due to status\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"status\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661123396898816US",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661123396898816US"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC74_ORDERAPI_Update_Order_Status_CANCELED",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Cancel.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"062\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"Order could not be updated due to status\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"status\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661075913183232US",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661075913183232US"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC75_ORDERAPI_Update_Order_Status_RETURNED",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Returned.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"062\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"Order could not be updated due to status\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"status\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661120075010048US",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661120075010048US"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC76_ORDERAPI_Update_Order_Status_SHIPPED",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Shipped.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"062\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"Order could not be updated due to status\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"status\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661128325206016US",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661128325206016US"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC77_ORDERAPI_Update_Order_With_Invalid_SKU",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"let myjsonobj = {\r",
							"            \"lineId\": 4,\r",
							"            \"sku\": \"fff\",\r",
							"            \"unitPrice\": 100,\r",
							"            \"orderedQuantity\": 10,\r",
							"            \"lineTotal\": 1000,\r",
							"            \"originCountryCode\":\"US\",\r",
							"            \"originStateProvince\":\"CT\",\r",
							"            \"hSTariffCode\":\"HSCode\",\r",
							"            \"hSTariffCodeCountry\":\"IND\",\r",
							"            \"inventoryType\":\"NEW\",}\r",
							"tempRequest[\"orderLines\"][2]=myjsonobj\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status Other than Received or OnHold.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"031\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"Order could not be updated due to status\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"status\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC78_OrdersAPI_Update_Order_Toaddress_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC79_OrdersAPI_Update_Order_Toaddress_addressLines_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"addressLines\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress AddressLine is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress.AddressLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC80_OrdersAPI_Update_Order_Toaddress_Name_Blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"name\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress Name is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress.Name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC81_OrdersAPI_Update_Order_Toaddress_addressLines_noaddesslines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"toAddress\"][\"addressLines\"]=\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress no AddressLine provided.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"ToAddress.AddressLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC82_OrdersAPI_Update_Order_Toaddress_more than3_addressLines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"tempRequest[\"toAddress\"][\"addressLines\"]=\"\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"D\\\"\";\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress AddressLine has more than 3 lines\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"045\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"invalid value provided\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"toAddress.addressLines\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC83_OrdersAPI_Update_Order_Toaddress_cityTown_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"cityTown\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress cityTown is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.toLowerCase()).to.eql((\"Required field is missing.\").toLowerCase());\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.eql((\"ToAddress.CityTown\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC84_OrdersAPI_Update_Order_Toaddress_stateProvince_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"stateProvince\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress stateProvince is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"toAddress.stateprovince\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC85_OrdersAPI_Update_Order_Toaddress_postalCode_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"postalCode\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress postalCode is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"toAddress.postalCode\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC86_OrdersAPI_Update_Order_Toaddress_countryCode_blank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var tempRequest = JSON.parse(pm.globals.get(\"originalRequest\"));\r",
							"delete tempRequest[\"toAddress\"][\"countryCode\"];\r",
							"pm.variables.set(\"body\",JSON.stringify(tempRequest));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when ToAddress countryCode is blank.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"006\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Required field is missing.\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"toAddress.countryCode\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC86_OrdersAPI_CancelOrder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"brand\",\"MyBrand\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Cancel Order Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Validate Cancel Order Order Status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"Cancelled\");\r",
							"});\r",
							"pm.test(\"Validate Cancel Order information\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderId).to.eql(pm.globals.get(\"OrderID\"));\r",
							"    pm.expect(jsonData.brand).to.eql(pm.collectionVariables.get(\"brand\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC87_OrdersAPI_CancelOrder_Invalid_Brand",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate Cancel Order, error message when Invalid Brand.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"070\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Order not found for\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"clientId,brand,OrderId\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}/cancel?brand=\"Invalid\"",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "\"Invalid\""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC88_OrdersAPI_CancelOrder_Invalid_OrderID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate Cancel Order, error message when Invalid OrderID.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"070\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Order not found for\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"clientId,brand,OrderId\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/\"INVALID\"/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"\"INVALID\"",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC89_OrdersAPI_CancelOrder_Invalid_ClientDeveloperID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate Cancel Order, error message when Invalid PB Developer ID.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"070\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription).to.eql(\"Order not found for\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0].toLowerCase()).to.equals((\"clientId,brand,OrderId\").toLowerCase());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "124",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/\"INVALID\"/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"\"INVALID\"",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC90_OrdersAPI_Cancel_Order_InCancel_Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Cancel Order Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Validate Cancel Order Order Status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"Cancelled\");\r",
							"});\r",
							"pm.test(\"Validate Cancel Order information\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderId).to.eql(pm.globals.get(\"OrderID\"));\r",
							"    pm.expect(jsonData.brand).to.eql(pm.collectionVariables.get(\"brand\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/{{OrderID}}/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"{{OrderID}}",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC91_OrdersAPI_Cancel_Order_InHOLD_Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Cancel Order Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Validate Cancel Order, Order Status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"Cancelled\");\r",
							"});\r",
							"pm.test(\"Validate Cancel Order information\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderId).to.eql(\"OR1234A0001661075913183232US\");\r",
							"    pm.expect(jsonData.brand).to.eql(pm.collectionVariables.get(\"brand\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661075913183232US/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661075913183232US",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC92_OrdersAPI_Cancel_Order_BackOrder_Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Cancel Order Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Validate Cancel Order Order Status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"Cancelled\");\r",
							"});\r",
							"pm.test(\"Validate Cancel Order information\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.orderId).to.eql(\"OR1234A0001661123396898816US\");\r",
							"    pm.expect(jsonData.brand).to.eql(pm.collectionVariables.get(\"brand\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661123396898816US/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661123396898816US",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC93_OrdersAPI_Cancel_Order_INPROGRESS_Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Returned.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"071\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"order cancellation only allowed for OnHold,BackOrder,Received\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661075820908544US/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661075820908544US",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC94_OrdersAPI_Cancel_Order_RETURNED_Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Returned.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"071\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"order cancellation only allowed for OnHold,BackOrder,Received\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661120075010048US/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661120075010048US",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TC95_OrdersAPI_Cancel_Order_SHIPPED_Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Error Response.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"pm.test(\"Validate error fields when Order Status is Shipped.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var errorCode = pm.variables.get(\"FulfillmentIdentifier\") + pm.variables.get(\"ApplicationIdentifier\") + \"071\"\r",
							"    pm.expect(jsonData[0].errorCode).to.eql(errorCode);\r",
							"    pm.expect(jsonData[0].errorDescription.trim()).to.eql(\"order cancellation only allowed for OnHold,BackOrder,Received\");\r",
							"    pm.expect(jsonData[0].additionalInfo).to.eql(\"\");\r",
							"    pm.expect(jsonData[0].parameters[0]).to.eql(\"\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "xPBTransactionId",
						"value": "{{xPBTransactionId}}",
						"type": "text"
					},
					{
						"key": "xPBDeveloperId",
						"value": "{{xPBDeveloperId}}",
						"type": "text"
					},
					{
						"key": "xPBCorrelationId",
						"value": "{{xPBCorrelationId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/services/v1/orders/OR1234A0001661128325206016US/cancel?brand={{brand}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"services",
						"v1",
						"orders",
						"OR1234A0001661128325206016US",
						"cancel"
					],
					"query": [
						{
							"key": "brand",
							"value": "{{brand}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "PBOrderID",
			"value": ""
		},
		{
			"key": "collection_Header",
			"value": ""
		},
		{
			"key": "xPBTransactionId",
			"value": ""
		},
		{
			"key": "xPBCorrelationId",
			"value": ""
		},
		{
			"key": "xPBDeveloperId",
			"value": ""
		},
		{
			"key": "Brand",
			"value": ""
		},
		{
			"key": "ClientOrderID",
			"value": ""
		},
		{
			"key": "brand",
			"value": ""
		}
	]
}